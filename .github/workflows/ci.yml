# Sources of information:
# https://game.ci/docs/github/builder/
# https://game.ci/docs/github/getting-started#workflow-examples
# https://github.com/game-ci/unity-builder/issues/241
# https://game.ci/docs/troubleshooting/common-issues/#branch-is-dirty

name: Build and Deploy WebGL

on:
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
    build:
        name: Build WebGL
        runs-on: ubuntu-latest
        steps:
            # Checkout without Git LFS
            - name: Checkout repository
              uses: actions/checkout@v4

            # Git LFS
            - name: Create LFS file list
              run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
            
            - name: Restore LFS cache
              uses: actions/cache@v3
              id: lfs-cache
              with:
                path: .git/lfs
                key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

            - name: Git LFS Pull
              run: |
                git lfs pull
                git add .
                git reset --hard

            # Cache/Use Unity Library files if available
            - name: Prepare Unity cache
              uses: actions/cache@v3
              with:
                path: ./unity-project/mini-game-collection/Library
                key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
                restore-keys: |
                  Library-

            # Test
            #- name: Run Unity tests
            #  uses: game-ci/unity-test-runner@v4
            #  env:
            #    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            #    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            #    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
            #  with:
            #    githubToken: ${{ secrets.GITHUB_TOKEN }}
            #    projectPath: ./unity-project/mini-game-collection/

            # Create build
            - name: Build project (WebGL)
              uses: game-ci/unity-builder@v4
              env:
                UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
                UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
                UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
              with:
                # Temporary workaround while LFS dirtying issue persists
                allowDirtyBuild: true
                buildsPath: ./build
                buildMethod: UnityBuilderAction.BuildScript.Build
                # Parameters to pass to buildMethod if required
                #customParameters:
                projectPath: ./unity-project/mini-game-collection/
                targetPlatform: WebGL
                unityVersion: auto
                versioning: Semantic

            # Output / store build
            - uses: actions/upload-artifact@v4
              with:
                name: Build
                path: ./build

            # Push build to GitHub pages
            - name: Setup Pages
              uses: actions/configure-pages@v5

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v4
              with:
                path: ./build/WebGL/WebGL/

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

            # Create release page
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              # permit editing pages (release pages)
              permissions:
                pages: read|write
              env:
                 # This token is provided by Actions
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.ref }}
                release_name: Release ${{ github.ref }}
                body: |
                  Automatic build release.
                draft: false
                prerelease: true
                
            # Create zip of build
            - name: Build project
              # zip -t(date) <output> <inputs>
              run: zip -t mini-game-collection ./build/WebGL/WebGL/

            # Upload artifacts to release page
            - name: Upload Release Build
              id: upload-release-asset 
              uses: actions/upload-release-asset@v1
              # permit editing pages (release pages)
              permissions:
                pages: read|write
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                # This pulls from the CREATE RELEASE step above, referencing
                # it's ID to get its outputs object, which include a `upload_url`.
                # See this blog post for more info:
                # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
                upload_url: ${{ steps.create_release.outputs.upload_url }}
                asset_path: ./mini-game-collection.zip
                asset_name: mini-game-collection.zip
                asset_content_type: application/zip
              