# Sources of information:
# https://game.ci/docs/github/builder/
# https://game.ci/docs/github/getting-started#workflow-examples
# https://github.com/game-ci/unity-builder/issues/241
# https://game.ci/docs/troubleshooting/common-issues/#branch-is-dirty

name: Build and Deploy WebGL

on:
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
    build:
        name: Build WebGL
        runs-on: ubuntu-latest
        steps:
            # Checkout without Git LFS
            - name: Checkout repository
              uses: actions/checkout@v4

            # Git LFS
            - name: Create LFS file list
              run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
            
            - name: Restore LFS cache
              uses: actions/cache@v3
              id: lfs-cache
              with:
                path: .git/lfs
                key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

            - name: Git LFS Pull
              run: |
                git lfs pull
                git add .
                git reset --hard

            # Cache/Use Unity Library Files (if available)
            - name: Prepare Unity cache
              uses: actions/cache@v3
              with:
                path: ./unity-project/mini-game-collection/Library
                key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
                restore-keys: |
                  Library-

            # Create WebGL Unity Build
            - name: Unity Build (WebGL)
              uses: game-ci/unity-builder@v4
              env:
                UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
                UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
                UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
              with:
                # Temporary workaround while LFS dirtying issue persists
                allowDirtyBuild: true
                buildsPath: ./build
                buildMethod: UnityBuilderAction.BuildScript.Build
                # Build is looking for this version
                customImage: unityci/editor:ubuntu-2022.3.62f2-webgl-3
                # Parameters to pass to buildMethod if required
                #customParameters:
                projectPath: ./unity-project/mini-game-collection/
                targetPlatform: WebGL
                unityVersion: auto
                versioning: Semantic

            # Store build
            # TODO: this seems like it's not needed
            # UNLESS you upload from another workflow
            - uses: actions/upload-artifact@v4
              with:
                name: Build
                path: ./build

            # Push build to GitHub pages
            - name: Setup GitHub Pages
              uses: actions/configure-pages@v5

            - name: Upload Artifact to GitHub Pages
              uses: actions/upload-pages-artifact@v4
              with:
                path: ./build/WebGL/WebGL/

            - name: Deploy Artifacts to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

            ## TEST - speed up iteration by skipping build
            #- name: TEST - Create test artifacts
            #  run: |
            #    mkdir ./build
            #    mkdir ./build/WebGL
            #    mkdir ./build/WebGL/WebGL
            #    touch ./build/WebGL/WebGL/sample.txt

            # Create zip of build
            - name: ZIP Build
              run: |
                ### Generate archive
                export ZIP_NAME="mini-game-collection-$(date +"%Y-%m-%d").zip"
                zip -r $ZIP_NAME ./build/WebGL/WebGL*
                echo "Archive created: $ZIP_NAME"
                ls
                
                cd ./build
                ls -R
                cd ..

                ### Store in GitHub's env variable
                echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
                
            # Release Timestamp
            - name: Create Release Timestamp
              run: |
                ### Generate date
                export BUILD_DATE=$(date)
                echo "Build time: $BUILD_DATE"
                ### Store in GitHub's env variable
                echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

            - name: Get SHA8
              run: echo "SHA8=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

            # TODO: 
            # Create release page
            - name: Create Release Page
              id: create_release_page
              uses: actions/create-release@v1
              env:
                 # This token is provided by Actions
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ci_${{ github.ref_name }}_${{ env.SHA8 }}
                release_name: ${{ env.BUILD_DATE }} - ci_${{ github.ref_name }}_${{ env.SHA8 }}
                body: |
                  Automatic build release generated on ${{ env.BUILD_DATE }}.
                  Generated from `${{ github.ref_name }}` commit ${{ github.sha }}
                  GitHub ref: ${{ github.ref }}
                draft: false
                prerelease: true

            # Upload artifacts to release page
            - name: Upload Release Build
              id: upload-release-asset 
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release_page.outputs.upload_url }}
                asset_path: ${{ env.ZIP_NAME }}
                asset_name: ${{ env.ZIP_NAME }}
                asset_content_type: application/zip
              